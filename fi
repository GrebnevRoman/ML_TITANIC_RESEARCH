get all movements on that day 

Task specification 

Attention perhaps placements are also needed if we have the source group info in the data. 

Complex iterative process to get all movements from the source groups from ðsow_animalGroup_e2e_bb_last_day transitive to all target groups for that day and all movements into that group during the day. 

Input processing 

Each iteration will use the result of the last iteration as base. First iteration takes the ðsow_animalGroup_e2e_bb_last_day as starting point joining all movements from there with ðsow_animalGroup_e2e_bb_last_day.animalGroup_h_hk = ðanimalMovement_l.animalGroup_h_hk_source  for movements away (original group amount decrease) or ðsow_animalGroup_e2e_bb_last_day.animalGroup_h_hk = ðanimalMovement_l.animalGroup_h_hk_target (original group amount increase). 

and in the case of move away 

DATE(ðanimalMovement_l.startTime ) = ðsow_animalGroup_e2e_bb_last_day.date 

and in the case of move in 

DATE(ðanimalMovement_l_all_mn_bs.endTime ) = ðsow_animalGroup_e2e_bb_last_day.date 

Animal Foster is threated the same way as these are just special movements where start end end are equal. 

Output processing 

|Transform|  

ïanimalGroup_movements_day.movement_id = ðanimalMovement_l.animalMovementId OR ðanimalFoster_l.animalFosterId 

|End| 

|Transform|  

ïanimalGroup_movements_day.animalGroup_h_hk_source =  

ðsow_animalGroup_e2e_bb_last_day.animalGroup_h_hk  

if there are movements away from the last day group 

OR  

ðanimalMovement_l.animalGroup_h_hk_source /ðanimalFoster_l.animalGroup_h_hk_source 

if there are movements into the last day group 

|End| 

|Transform|  

ïanimalGroup_movements_day.animalGroup_h_hk_target =  

ðanimalMovement_l.animalGroup_h_hk_target / ðanimalFoster_l.animalGroup_h_hk_target 

if there are movements away from the last day group 

OR 

ðsow_animalGroup_e2e_bb_last_day.animalGroup_h_hk  

if there are movements into the last day group 

|End| 

|Transform|  

ïanimalGroup_movements_day.animalsMoved := ðanimalMovement_l_all_mn_bs.numberOfAnimalsMoved / ðanimalFoster_l_all_mn_bs.numberOfAnimalsMoved 

|Transform|  

ïanimalGroup_movements_day.start_dts := ðanimalMovement_l.startTime /ðanimalFoster_l.animalFosterDate 

|End| 

|Transform|  

ïanimalGroup_movements_day.totalWeightMoved := ðanimalMovement_l_all_mn_bs.totalWeight / ðanimalFoster_l_all_mn_bs.totalWeight 

|End| 

|Transform|  

ïanimalGroup_movements_day.end_dts = ðanimalMovement_l_all_mn_bs.endTime / ðanimalFoster_l.animalFosterDate  





calculate per sow 

Task specification 

Connect the movement and value data of the group with the last sow connection. Stage will be calculated here. 

Input processing 

For the first iteration connect the first movement related to the preday groups of a sow incoming and outgoing from ðanimalGroup_movements_day and the group value info from ðanimalGroup_values by  

ðsow_animalGroup_e2e_bb_last_day.animalGroup_h_hk =  

ðanimalGroup_movements_day.animalGroup_h_hk_source or ðanimalGroup_movements_day.animalGroup_h_hk_target  

and ðanimalGroup_values.animalGroup_h_hk  

and ðanimalGroup_values.movement_id = ðanimalGroup_movements_day.movement_id 

and for the weaning event ðweaning_l.weaningId = ðanimalGroup_movements_day.movement_id 

and the latest info from ðweaning_l_all_ln_bs by ðweaning_l.weaning_l_hk = ðweaning_l_all_ln_bs.weaning_l_hk and ðweaning_l_all_ln_bs.currec = 1 

Output processing 

Each iteration will increment the values so after the last iteration the result value is written out -> one row per sow and group. 

ïsow_animalGroup_e2e_bb_last_day.sow_h_hk := ðsow_animalGroup_e2e_bb_last_day.sow_h_hk 

ïsow_animalGroup_e2e_bb_last_day.animalGroup_h_hk := ðanimalGroup_values.animalGroup_h_hk 

|Transform|  

ïsow_animalGroup_e2e_bb_last_day.stage =  

if there is a weaning event ðweaning_l.weanDate = DATE( ðanimalGroup_values.timestamp_dts) for the groupDATE 

then 'weaning' 

else previous ðsow_animalGroup_e2e_bb_last_day.stage  (if this is 'farrowing', then 'piglets', if 'weaning' then fattening, else take as it is ) 

|End| 

ïsow_animalGroup_e2e_bb_last_day.date := ðe2e_dates.date of the overall iteration 

|Transform|  

ïsow_animalGroup_e2e_bb_last_day.factor =  

if added and the source group is from the same sow then 

(ïsow_animalGroup_e2e_bb_last_day.factor from the source group * ðanimalGroup_movements_day.animalsMoved  

+ ðanimalGroup_values.source_nr_animals * ðsow_animalGroup_e2e_bb_last_day.factor) (new nr of animal for the sow in the group) 

/ ðanimalGroup_values.target_nr_animals  

 

if removed 

(ðanimalGroup_values.source_nr_animals * ðsow_animalGroup_e2e_bb_last_day.factor 

- ðsow_animalGroup_e2e_bb_last_day.factor  * ðanimalGroup_movements_day.animalsMoved  

) (new nr of animal for the sow in the group) 

/ ðanimalGroup_values.target_nr_animals  

 

if added and source group is not from the sow 

ðanimalGroup_values.source_nr_animals * ðsow_animalGroup_e2e_bb_last_day.factor 

/ ðanimalGroup_values.target_nr_animals  

|End| 

|Transform| 

 ïsow_animalGroup_e2e_bb_last_day.avg_actual_weight_estimated = ðanimalGroup_values.target_weight / ðanimalGroup_values.target_nr_animals  

* new factor from above| 

|End| 

Transform|  

ïsow_animalGroup_e2e_bb_last_day.actual_number_of_pigs =  

ðanimalGroup_values.target_nr_animals * new factor from above 

|End|     

Description 

Process to calculate the end to end lifecycle process connected to the sow where the pigs came from. It will respect as far as possible all movements, placements, sales and deaths. 

The bridge have to be filled in a delta load. Currently changes in the past will not be handled, but can be implemented later. So it will just handle new reporting dates (all  days between today and the max date in the bridge + 1 day and just the as is view from the sources (currec = 1). So the bridge will just contain the business history and a daily snapshot of the technical history on the batch run timestamp. 
